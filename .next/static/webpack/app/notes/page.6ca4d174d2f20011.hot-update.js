"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/notes/page",{

/***/ "(app-pages-browser)/./src/hooks/use-whisper-live.ts":
/*!***************************************!*\
  !*** ./src/hooks/use-whisper-live.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useWhisperLive: () => (/* binding */ useWhisperLive)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _hooks_use_toast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/hooks/use-toast */ \"(app-pages-browser)/./src/hooks/use-toast.ts\");\n/* __next_internal_client_entry_do_not_use__ useWhisperLive auto */ \n\nfunction useWhisperLive(config) {\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        isConnected: false,\n        isTranscribing: false,\n        transcript: '',\n        error: null\n    });\n    const wsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const uidRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(typeof crypto !== 'undefined' && crypto.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2));\n    const { toast } = (0,_hooks_use_toast__WEBPACK_IMPORTED_MODULE_1__.useToast)();\n    const connect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useWhisperLive.useCallback[connect]\": ()=>{\n            console.log('[useWhisperLive]  connect()', config);\n            if (wsRef.current) {\n                wsRef.current.close();\n                wsRef.current = null;\n            }\n            // 1) create AudioContext now so we can hand its real sampleRate to the server\n            const ctx = new AudioContext();\n            ctxRef.current = ctx;\n            const actualSampleRate = ctx.sampleRate;\n            console.log('[useWhisperLive] audioContext.sampleRate =', actualSampleRate);\n            setState({\n                \"useWhisperLive.useCallback[connect]\": (s)=>({\n                        ...s,\n                        error: null\n                    })\n            }[\"useWhisperLive.useCallback[connect]\"]);\n            const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n            const ws = new WebSocket(\"\".concat(protocol, \"://\").concat(config.serverUrl, \":\").concat(config.port));\n            ws.binaryType = 'arraybuffer';\n            wsRef.current = ws;\n            ws.onopen = ({\n                \"useWhisperLive.useCallback[connect]\": ()=>{\n                    console.log('[useWhisperLive] 🟢 WebSocket OPEN');\n                    const taskName = config.translate ? 'translate' : 'transcribe';\n                    ws.send(JSON.stringify({\n                        task: taskName,\n                        uid: uidRef.current,\n                        language: config.language,\n                        model: config.model,\n                        vad: config.vad,\n                        save_recording: config.saveRecording,\n                        output_filename: config.outputFilename,\n                        max_clients: config.maxClients,\n                        max_connection_time: config.maxConnectionTime,\n                        // **important**: must match your AudioContext & ScriptProcessor\n                        sample_rate: actualSampleRate,\n                        chunk_size: 4096\n                    }));\n                    startTranscription();\n                    setState({\n                        \"useWhisperLive.useCallback[connect]\": (s)=>({\n                                ...s,\n                                isConnected: true\n                            })\n                    }[\"useWhisperLive.useCallback[connect]\"]);\n                }\n            })[\"useWhisperLive.useCallback[connect]\"];\n            ws.onmessage = ({\n                \"useWhisperLive.useCallback[connect]\": (e)=>{\n                    if (typeof e.data !== 'string') return;\n                    console.log('[useWhisperLive] got message →', e.data);\n                    const msg = JSON.parse(e.data);\n                    if (msg.type === 'partial' || msg.type === 'transcript') {\n                        setState({\n                            \"useWhisperLive.useCallback[connect]\": (s)=>({\n                                    ...s,\n                                    transcript: s.transcript + msg.text\n                                })\n                        }[\"useWhisperLive.useCallback[connect]\"]);\n                    } else if (msg.type === 'final') {\n                        setState({\n                            \"useWhisperLive.useCallback[connect]\": (s)=>({\n                                    ...s,\n                                    transcript: s.transcript + msg.text + '\\n',\n                                    isTranscribing: false\n                                })\n                        }[\"useWhisperLive.useCallback[connect]\"]);\n                    }\n                }\n            })[\"useWhisperLive.useCallback[connect]\"];\n            ws.onclose = ({\n                \"useWhisperLive.useCallback[connect]\": ()=>{\n                    setState({\n                        \"useWhisperLive.useCallback[connect]\": (s)=>({\n                                ...s,\n                                isConnected: false,\n                                isTranscribing: false\n                            })\n                    }[\"useWhisperLive.useCallback[connect]\"]);\n                }\n            })[\"useWhisperLive.useCallback[connect]\"];\n            ws.onerror = ({\n                \"useWhisperLive.useCallback[connect]\": (err)=>{\n                    console.warn('[useWhisperLive] WebSocket error (non‑fatal)', err);\n                // don’t setState or toast here\n                }\n            })[\"useWhisperLive.useCallback[connect]\"];\n        }\n    }[\"useWhisperLive.useCallback[connect]\"], [\n        config,\n        toast\n    ]);\n    const micRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const systemRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const ctxRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const processorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const startTranscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useWhisperLive.useCallback[startTranscription]\": async ()=>{\n            if (!wsRef.current || wsRef.current.readyState !== WebSocket.OPEN) {\n                setState({\n                    \"useWhisperLive.useCallback[startTranscription]\": (s)=>({\n                            ...s,\n                            error: 'Not connected'\n                        })\n                }[\"useWhisperLive.useCallback[startTranscription]\"]);\n                return;\n            }\n            try {\n                var _config_audioSources;\n                // 1) Screen + system audio (if enabled)\n                let systemStream = null;\n                if ((_config_audioSources = config.audioSources) === null || _config_audioSources === void 0 ? void 0 : _config_audioSources.systemAudio) {\n                    systemStream = await navigator.mediaDevices.getDisplayMedia({\n                        video: true,\n                        audio: true\n                    });\n                    systemRef.current = systemStream;\n                }\n                // 2) Microphone\n                const micStream = await navigator.mediaDevices.getUserMedia({\n                    audio: {\n                        sampleRate: 16000,\n                        channelCount: 1\n                    }\n                });\n                micRef.current = micStream;\n                const ctx = ctxRef.current;\n                const dest = ctx.createMediaStreamDestination();\n                // 4) Wire mic → dest\n                const micSrc = ctx.createMediaStreamSource(micStream);\n                micSrc.connect(dest);\n                // 5) Wire system audio → dest\n                if (systemStream) {\n                    const sysSrc = ctx.createMediaStreamSource(systemStream);\n                    sysSrc.connect(dest);\n                }\n                // 6) Instead of wiring mic+sys directly to the processor, we\n                //    take the mixed dest.stream and hook that up:\n                const mixedSrc = ctx.createMediaStreamSource(dest.stream);\n                // 7) Create your ScriptProcessor (bufferSize=4096, mono in/out)\n                const processor = ctx.createScriptProcessor(4096, 1, 1);\n                // 8) Wire the mixed audio into the processor\n                mixedSrc.connect(processor);\n                // 9) On each onaudioprocess, build exactly one packet\n                processor.onaudioprocess = ({\n                    \"useWhisperLive.useCallback[startTranscription]\": (e)=>{\n                        var _wsRef_current;\n                        const float32 = e.inputBuffer.getChannelData(0);\n                        const int16 = new Int16Array(float32.length);\n                        for(let i = 0; i < float32.length; i++){\n                            int16[i] = Math.max(-32768, Math.min(32767, float32[i] * 32767));\n                        }\n                        if (((_wsRef_current = wsRef.current) === null || _wsRef_current === void 0 ? void 0 : _wsRef_current.readyState) === WebSocket.OPEN) {\n                            wsRef.current.send(int16.buffer);\n                        }\n                    }\n                })[\"useWhisperLive.useCallback[startTranscription]\"];\n                // 10) Start it\n                processor.connect(ctx.destination);\n                processorRef.current = processor;\n                setState({\n                    \"useWhisperLive.useCallback[startTranscription]\": (s)=>({\n                            ...s,\n                            isTranscribing: true\n                        })\n                }[\"useWhisperLive.useCallback[startTranscription]\"]);\n            } catch (err) {\n                setState({\n                    \"useWhisperLive.useCallback[startTranscription]\": (s)=>({\n                            ...s,\n                            error: \"Failed to start transcription: \".concat(err.message)\n                        })\n                }[\"useWhisperLive.useCallback[startTranscription]\"]);\n                toast({\n                    title: 'Transcription Error',\n                    description: err.message,\n                    variant: 'destructive'\n                });\n            }\n        }\n    }[\"useWhisperLive.useCallback[startTranscription]\"], [\n        config,\n        toast\n    ]);\n    const stopTranscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useWhisperLive.useCallback[stopTranscription]\": ()=>{\n            var _wsRef_current;\n            if (((_wsRef_current = wsRef.current) === null || _wsRef_current === void 0 ? void 0 : _wsRef_current.readyState) === WebSocket.OPEN) {\n                // zero‑length ArrayBuffer signals “please flush & finish”\n                wsRef.current.send(new ArrayBuffer(0));\n            }\n            // tear down audio graph immediately\n            if (processorRef.current) {\n                processorRef.current.disconnect();\n                processorRef.current = null;\n            }\n            if (micRef.current) {\n                micRef.current.getTracks().forEach({\n                    \"useWhisperLive.useCallback[stopTranscription]\": (t)=>t.stop()\n                }[\"useWhisperLive.useCallback[stopTranscription]\"]);\n                micRef.current = null;\n            }\n            if (systemRef.current) {\n                systemRef.current.getTracks().forEach({\n                    \"useWhisperLive.useCallback[stopTranscription]\": (t)=>t.stop()\n                }[\"useWhisperLive.useCallback[stopTranscription]\"]);\n                systemRef.current = null;\n            }\n            if (ctxRef.current) {\n                ctxRef.current.close();\n                ctxRef.current = null;\n            }\n            setState({\n                \"useWhisperLive.useCallback[stopTranscription]\": (s)=>({\n                        ...s,\n                        isTranscribing: false\n                    })\n            }[\"useWhisperLive.useCallback[stopTranscription]\"]);\n        }\n    }[\"useWhisperLive.useCallback[stopTranscription]\"], []);\n    const disconnect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useWhisperLive.useCallback[disconnect]\": ()=>{\n            if (wsRef.current) {\n                wsRef.current.close();\n                wsRef.current = null;\n            }\n            stopTranscription();\n            setState({\n                isConnected: false,\n                isTranscribing: false,\n                transcript: '',\n                error: null\n            });\n        }\n    }[\"useWhisperLive.useCallback[disconnect]\"], [\n        stopTranscription\n    ]);\n    const clearTranscript = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useWhisperLive.useCallback[clearTranscript]\": ()=>{\n            setState({\n                \"useWhisperLive.useCallback[clearTranscript]\": (s)=>({\n                        ...s,\n                        transcript: ''\n                    })\n            }[\"useWhisperLive.useCallback[clearTranscript]\"]);\n        }\n    }[\"useWhisperLive.useCallback[clearTranscript]\"], []);\n    return {\n        state,\n        connect,\n        startTranscription,\n        stopTranscription,\n        disconnect,\n        clearTranscript,\n        wsRef\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9ob29rcy91c2Utd2hpc3Blci1saXZlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7b0VBRXFEO0FBQ1Q7QUF1QnJDLFNBQVNJLGVBQWVDLE1BQXlCO0lBQ3BELE1BQU0sQ0FBQ0MsT0FBT0MsU0FBUyxHQUFHUCwrQ0FBUUEsQ0FBbUI7UUFDakRRLGFBQWE7UUFDYkMsZ0JBQWdCO1FBQ2hCQyxZQUFZO1FBQ1pDLE9BQU87SUFDWDtJQUVBLE1BQU1DLFFBQVFYLDZDQUFNQSxDQUFtQjtJQUN2QyxNQUFNWSxTQUFTWiw2Q0FBTUEsQ0FDakIsT0FBT2EsV0FBVyxlQUFlQSxPQUFPQyxVQUFVLEdBQzVDRCxPQUFPQyxVQUFVLEtBQ2pCQyxLQUFLQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQyxJQUFJQyxLQUFLLENBQUM7SUFFM0MsTUFBTSxFQUFFQyxLQUFLLEVBQUUsR0FBR2pCLDBEQUFRQTtJQUUxQixNQUFNa0IsVUFBVW5CLGtEQUFXQTsrQ0FBQztZQUN4Qm9CLFFBQVFDLEdBQUcsQ0FBQywrQkFBK0JsQjtZQUMzQyxJQUFJTyxNQUFNWSxPQUFPLEVBQUU7Z0JBQ2ZaLE1BQU1ZLE9BQU8sQ0FBQ0MsS0FBSztnQkFDbkJiLE1BQU1ZLE9BQU8sR0FBRztZQUNwQjtZQUNBLDhFQUE4RTtZQUM5RSxNQUFNRSxNQUFNLElBQUlDO1lBQ2hCQyxPQUFPSixPQUFPLEdBQUdFO1lBQ2pCLE1BQU1HLG1CQUFtQkgsSUFBSUksVUFBVTtZQUN2Q1IsUUFBUUMsR0FBRyxDQUFDLDhDQUE4Q007WUFDMUR0Qjt1REFBU3dCLENBQUFBLElBQU07d0JBQUUsR0FBR0EsQ0FBQzt3QkFBRXBCLE9BQU87b0JBQUs7O1lBRW5DLE1BQU1xQixXQUFXQyxPQUFPQyxRQUFRLENBQUNGLFFBQVEsS0FBSyxXQUFXLFFBQVE7WUFDakUsTUFBTUcsS0FBSyxJQUFJQyxVQUFVLEdBQWlCL0IsT0FBZDJCLFVBQVMsT0FBeUIzQixPQUFwQkEsT0FBT2dDLFNBQVMsRUFB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QUFHQyxPQUFPO3FFQUFDQyxDQUFBQSxJQUFLQSxFQUFFQyxJQUFJOztnQkFBSy9DLE9BQU9qRCxPQUFPLEdBQUc7WUFBTTtZQUNoRyxJQUFJa0QsVUFBVWxELE9BQU8sRUFBRTtnQkFBRWtELFVBQVVsRCxPQUFPLENBQUM2RixTQUFTLEdBQUdDLE9BQU87cUVBQUNDLENBQUFBLElBQUtBLEVBQUVDLElBQUk7O2dCQUFLOUMsVUFBVWxELE9BQU8sR0FBRztZQUFNO1lBQ3pHLElBQUlJLE9BQU9KLE9BQU8sRUFBRTtnQkFBRUksT0FBT0osT0FBTyxDQUFDQyxLQUFLO2dCQUFJRyxPQUFPSixPQUFPLEdBQUc7WUFBTTtZQUVyRWpCO2lFQUFTd0IsQ0FBQUEsSUFBTTt3QkFBRSxHQUFHQSxDQUFDO3dCQUFFdEIsZ0JBQWdCO29CQUFNOztRQUNqRDt3REFBRyxFQUFFO0lBR0wsTUFBTTJHLGFBQWFsSCxrREFBV0E7a0RBQUM7WUFDM0IsSUFBSVUsTUFBTVksT0FBTyxFQUFFO2dCQUNmWixNQUFNWSxPQUFPLENBQUNDLEtBQUs7Z0JBQ25CYixNQUFNWSxPQUFPLEdBQUc7WUFDcEI7WUFDQTBGO1lBQ0EzRyxTQUFTO2dCQUFFQyxhQUFhO2dCQUFPQyxnQkFBZ0I7Z0JBQU9DLFlBQVk7Z0JBQUlDLE9BQU87WUFBSztRQUN0RjtpREFBRztRQUFDdUc7S0FBa0I7SUFFdEIsTUFBTU8sa0JBQWtCdkgsa0RBQVdBO3VEQUFDO1lBQ2hDSzsrREFBU3dCLENBQUFBLElBQU07d0JBQUUsR0FBR0EsQ0FBQzt3QkFBRXJCLFlBQVk7b0JBQUc7O1FBQzFDO3NEQUFHLEVBQUU7SUFFTCxPQUFPO1FBQ0hKO1FBQ0FlO1FBQ0F3QztRQUNBcUQ7UUFDQUU7UUFDQUs7UUFDQTdHO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsiRTpcXEFpdm9pY2V0b3RleHRcXHNyY1xcaG9va3NcXHVzZS13aGlzcGVyLWxpdmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXHJcblxyXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyB1c2VUb2FzdCB9IGZyb20gJ0AvaG9va3MvdXNlLXRvYXN0J1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXaGlzcGVyTGl2ZUNvbmZpZyB7XHJcbiAgICBzZXJ2ZXJVcmw6IHN0cmluZ1xyXG4gICAgcG9ydDogbnVtYmVyXHJcbiAgICBsYW5ndWFnZTogc3RyaW5nXHJcbiAgICB0cmFuc2xhdGU6IGJvb2xlYW5cclxuICAgIG1vZGVsOiBzdHJpbmdcclxuICAgIHZhZDogYm9vbGVhblxyXG4gICAgc2F2ZVJlY29yZGluZzogYm9vbGVhblxyXG4gICAgb3V0cHV0RmlsZW5hbWU6IHN0cmluZ1xyXG4gICAgbWF4Q2xpZW50czogbnVtYmVyXHJcbiAgICBtYXhDb25uZWN0aW9uVGltZTogbnVtYmVyXHJcbiAgICBhdWRpb1NvdXJjZXM/OiB7IG1pY3JvcGhvbmU6IGJvb2xlYW47IHN5c3RlbUF1ZGlvOiBib29sZWFuIH1cclxufVxyXG5cclxuaW50ZXJmYWNlIFdoaXNwZXJMaXZlU3RhdGUge1xyXG4gICAgaXNDb25uZWN0ZWQ6IGJvb2xlYW5cclxuICAgIGlzVHJhbnNjcmliaW5nOiBib29sZWFuXHJcbiAgICB0cmFuc2NyaXB0OiBzdHJpbmdcclxuICAgIGVycm9yOiBzdHJpbmcgfCBudWxsXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VXaGlzcGVyTGl2ZShjb25maWc6IFdoaXNwZXJMaXZlQ29uZmlnKSB7XHJcbiAgICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlPFdoaXNwZXJMaXZlU3RhdGU+KHtcclxuICAgICAgICBpc0Nvbm5lY3RlZDogZmFsc2UsXHJcbiAgICAgICAgaXNUcmFuc2NyaWJpbmc6IGZhbHNlLFxyXG4gICAgICAgIHRyYW5zY3JpcHQ6ICcnLFxyXG4gICAgICAgIGVycm9yOiBudWxsLFxyXG4gICAgfSlcclxuXHJcbiAgICBjb25zdCB3c1JlZiA9IHVzZVJlZjxXZWJTb2NrZXQgfCBudWxsPihudWxsKVxyXG4gICAgY29uc3QgdWlkUmVmID0gdXNlUmVmKFxyXG4gICAgICAgIHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5yYW5kb21VVUlEXHJcbiAgICAgICAgICAgID8gY3J5cHRvLnJhbmRvbVVVSUQoKVxyXG4gICAgICAgICAgICA6IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLFxyXG4gICAgKVxyXG4gICAgY29uc3QgeyB0b2FzdCB9ID0gdXNlVG9hc3QoKVxyXG5cclxuICAgIGNvbnN0IGNvbm5lY3QgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1t1c2VXaGlzcGVyTGl2ZV0gIGNvbm5lY3QoKScsIGNvbmZpZyk7XHJcbiAgICAgICAgaWYgKHdzUmVmLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgd3NSZWYuY3VycmVudC5jbG9zZSgpXHJcbiAgICAgICAgICAgIHdzUmVmLmN1cnJlbnQgPSBudWxsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIDEpIGNyZWF0ZSBBdWRpb0NvbnRleHQgbm93IHNvIHdlIGNhbiBoYW5kIGl0cyByZWFsIHNhbXBsZVJhdGUgdG8gdGhlIHNlcnZlclxyXG4gICAgICAgIGNvbnN0IGN0eCA9IG5ldyBBdWRpb0NvbnRleHQoKVxyXG4gICAgICAgIGN0eFJlZi5jdXJyZW50ID0gY3R4XHJcbiAgICAgICAgY29uc3QgYWN0dWFsU2FtcGxlUmF0ZSA9IGN0eC5zYW1wbGVSYXRlXHJcbiAgICAgICAgY29uc29sZS5sb2coJ1t1c2VXaGlzcGVyTGl2ZV0gYXVkaW9Db250ZXh0LnNhbXBsZVJhdGUgPScsIGFjdHVhbFNhbXBsZVJhdGUpXHJcbiAgICAgICAgc2V0U3RhdGUocyA9PiAoeyAuLi5zLCBlcnJvcjogbnVsbCB9KSlcclxuXHJcbiAgICAgICAgY29uc3QgcHJvdG9jb2wgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonID8gJ3dzcycgOiAnd3MnO1xyXG4gICAgICAgIGNvbnN0IHdzID0gbmV3IFdlYlNvY2tldChgJHtwcm90b2NvbH06Ly8ke2NvbmZpZy5zZXJ2ZXJVcmx9OiR7Y29uZmlnLnBvcnR9YCk7XHJcbiAgICAgICAgd3MuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcidcclxuICAgICAgICB3c1JlZi5jdXJyZW50ID0gd3NcclxuXHJcbiAgICAgICAgd3Mub25vcGVuID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW3VzZVdoaXNwZXJMaXZlXSDwn5+iIFdlYlNvY2tldCBPUEVOJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhc2tOYW1lID0gY29uZmlnLnRyYW5zbGF0ZSA/ICd0cmFuc2xhdGUnIDogJ3RyYW5zY3JpYmUnXHJcbiAgICAgICAgICAgIHdzLnNlbmQoXHJcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFzazogdGFza05hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdWlkOiB1aWRSZWYuY3VycmVudCxcclxuICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZTogY29uZmlnLmxhbmd1YWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBjb25maWcubW9kZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFkOiBjb25maWcudmFkLFxyXG4gICAgICAgICAgICAgICAgICAgIHNhdmVfcmVjb3JkaW5nOiBjb25maWcuc2F2ZVJlY29yZGluZyxcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRfZmlsZW5hbWU6IGNvbmZpZy5vdXRwdXRGaWxlbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBtYXhfY2xpZW50czogY29uZmlnLm1heENsaWVudHMsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4X2Nvbm5lY3Rpb25fdGltZTogY29uZmlnLm1heENvbm5lY3Rpb25UaW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICoqaW1wb3J0YW50Kio6IG11c3QgbWF0Y2ggeW91ciBBdWRpb0NvbnRleHQgJiBTY3JpcHRQcm9jZXNzb3JcclxuICAgICAgICAgICAgICAgICAgICBzYW1wbGVfcmF0ZTogYWN0dWFsU2FtcGxlUmF0ZSxcclxuICAgICAgICAgICAgICAgICAgICBjaHVua19zaXplOiA0MDk2LFxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgc3RhcnRUcmFuc2NyaXB0aW9uKCk7XHJcbiAgICAgICAgICAgIHNldFN0YXRlKHMgPT4gKHsgLi4ucywgaXNDb25uZWN0ZWQ6IHRydWUgfSkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3cy5vbm1lc3NhZ2UgPSBlID0+IHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlLmRhdGEgIT09ICdzdHJpbmcnKSByZXR1cm47XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbdXNlV2hpc3BlckxpdmVdIGdvdCBtZXNzYWdlIOKGkicsIGUuZGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IEpTT04ucGFyc2UoZS5kYXRhKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChtc2cudHlwZSA9PT0gJ3BhcnRpYWwnIHx8IG1zZy50eXBlID09PSAndHJhbnNjcmlwdCcpIHtcclxuICAgICAgICAgICAgICAgIHNldFN0YXRlKHMgPT4gKHtcclxuICAgICAgICAgICAgICAgICAgICAuLi5zLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LS0gc3ByZWFkIHByZXZpb3VzIHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNjcmlwdDogcy50cmFuc2NyaXB0ICsgbXNnLnRleHRcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChtc2cudHlwZSA9PT0gJ2ZpbmFsJykge1xyXG4gICAgICAgICAgICAgICAgc2V0U3RhdGUocyA9PiAoe1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLnMsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtLSBzcHJlYWQgcHJldmlvdXMgc3RhdGVcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2NyaXB0OiBzLnRyYW5zY3JpcHQgKyBtc2cudGV4dCArICdcXG4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzVHJhbnNjcmliaW5nOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG5cclxuICAgICAgICB3cy5vbmNsb3NlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBzZXRTdGF0ZShzID0+ICh7IC4uLnMsIGlzQ29ubmVjdGVkOiBmYWxzZSwgaXNUcmFuc2NyaWJpbmc6IGZhbHNlIH0pKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd3Mub25lcnJvciA9IChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbdXNlV2hpc3BlckxpdmVdIFdlYlNvY2tldCBlcnJvciAobm9u4oCRZmF0YWwpJywgZXJyKTtcclxuICAgICAgICAgICAgLy8gZG9u4oCZdCBzZXRTdGF0ZSBvciB0b2FzdCBoZXJlXHJcbiAgICAgICAgfTtcclxuICAgIH0sIFtjb25maWcsIHRvYXN0XSlcclxuXHJcbiAgICBjb25zdCBtaWNSZWYgPSB1c2VSZWY8TWVkaWFTdHJlYW0gfCBudWxsPihudWxsKVxyXG4gICAgY29uc3Qgc3lzdGVtUmVmID0gdXNlUmVmPE1lZGlhU3RyZWFtIHwgbnVsbD4obnVsbClcclxuICAgIGNvbnN0IGN0eFJlZiA9IHVzZVJlZjxBdWRpb0NvbnRleHQgfCBudWxsPihudWxsKVxyXG4gICAgY29uc3QgcHJvY2Vzc29yUmVmID0gdXNlUmVmPFNjcmlwdFByb2Nlc3Nvck5vZGUgfCBudWxsPihudWxsKVxyXG5cclxuICAgIGNvbnN0IHN0YXJ0VHJhbnNjcmlwdGlvbiA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcclxuICAgICAgICBpZiAoIXdzUmVmLmN1cnJlbnQgfHwgd3NSZWYuY3VycmVudC5yZWFkeVN0YXRlICE9PSBXZWJTb2NrZXQuT1BFTikge1xyXG4gICAgICAgICAgICBzZXRTdGF0ZShzID0+ICh7IC4uLnMsIGVycm9yOiAnTm90IGNvbm5lY3RlZCcgfSkpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyAxKSBTY3JlZW4gKyBzeXN0ZW0gYXVkaW8gKGlmIGVuYWJsZWQpXHJcbiAgICAgICAgICAgIGxldCBzeXN0ZW1TdHJlYW06IE1lZGlhU3RyZWFtIHwgbnVsbCA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChjb25maWcuYXVkaW9Tb3VyY2VzPy5zeXN0ZW1BdWRpbykge1xyXG4gICAgICAgICAgICAgICAgc3lzdGVtU3RyZWFtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWEoe1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1ZGlvOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBzeXN0ZW1SZWYuY3VycmVudCA9IHN5c3RlbVN0cmVhbTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gMikgTWljcm9waG9uZVxyXG4gICAgICAgICAgICBjb25zdCBtaWNTdHJlYW0gPSBhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7XHJcbiAgICAgICAgICAgICAgICBhdWRpbzogeyBzYW1wbGVSYXRlOiAxNjAwMCwgY2hhbm5lbENvdW50OiAxIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtaWNSZWYuY3VycmVudCA9IG1pY1N0cmVhbTtcclxuXHJcblxyXG4gICAgICAgICAgICBjb25zdCBjdHggPSBjdHhSZWYuY3VycmVudCFcclxuICAgICAgICAgICAgY29uc3QgZGVzdCA9IGN0eC5jcmVhdGVNZWRpYVN0cmVhbURlc3RpbmF0aW9uKClcclxuXHJcbiAgICAgICAgICAgIC8vIDQpIFdpcmUgbWljIOKGkiBkZXN0XHJcbiAgICAgICAgICAgIGNvbnN0IG1pY1NyYyA9IGN0eC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZShtaWNTdHJlYW0pO1xyXG4gICAgICAgICAgICBtaWNTcmMuY29ubmVjdChkZXN0KTtcclxuXHJcbiAgICAgICAgICAgIC8vIDUpIFdpcmUgc3lzdGVtIGF1ZGlvIOKGkiBkZXN0XHJcbiAgICAgICAgICAgIGlmIChzeXN0ZW1TdHJlYW0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN5c1NyYyA9IGN0eC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZShzeXN0ZW1TdHJlYW0pO1xyXG4gICAgICAgICAgICAgICAgc3lzU3JjLmNvbm5lY3QoZGVzdCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIDYpIEluc3RlYWQgb2Ygd2lyaW5nIG1pYytzeXMgZGlyZWN0bHkgdG8gdGhlIHByb2Nlc3Nvciwgd2VcclxuICAgICAgICAgICAgLy8gICAgdGFrZSB0aGUgbWl4ZWQgZGVzdC5zdHJlYW0gYW5kIGhvb2sgdGhhdCB1cDpcclxuICAgICAgICAgICAgY29uc3QgbWl4ZWRTcmMgPSBjdHguY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UoZGVzdC5zdHJlYW0pO1xyXG5cclxuICAgICAgICAgICAgLy8gNykgQ3JlYXRlIHlvdXIgU2NyaXB0UHJvY2Vzc29yIChidWZmZXJTaXplPTQwOTYsIG1vbm8gaW4vb3V0KVxyXG4gICAgICAgICAgICBjb25zdCBwcm9jZXNzb3IgPSBjdHguY3JlYXRlU2NyaXB0UHJvY2Vzc29yKDQwOTYsIDEsIDEpO1xyXG5cclxuICAgICAgICAgICAgLy8gOCkgV2lyZSB0aGUgbWl4ZWQgYXVkaW8gaW50byB0aGUgcHJvY2Vzc29yXHJcbiAgICAgICAgICAgIG1peGVkU3JjLmNvbm5lY3QocHJvY2Vzc29yKTtcclxuXHJcbiAgICAgICAgICAgIC8vIDkpIE9uIGVhY2ggb25hdWRpb3Byb2Nlc3MsIGJ1aWxkIGV4YWN0bHkgb25lIHBhY2tldFxyXG4gICAgICAgICAgICBwcm9jZXNzb3Iub25hdWRpb3Byb2Nlc3MgPSBlID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZsb2F0MzIgPSBlLmlucHV0QnVmZmVyLmdldENoYW5uZWxEYXRhKDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW50MTYgPSBuZXcgSW50MTZBcnJheShmbG9hdDMyLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZsb2F0MzIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnQxNltpXSA9IE1hdGgubWF4KC0zMjc2OCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oMzI3NjcsIGZsb2F0MzJbaV0gKiAzMjc2NykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHdzUmVmLmN1cnJlbnQ/LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd3NSZWYuY3VycmVudC5zZW5kKGludDE2LmJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyAxMCkgU3RhcnQgaXRcclxuICAgICAgICAgICAgcHJvY2Vzc29yLmNvbm5lY3QoY3R4LmRlc3RpbmF0aW9uKTtcclxuICAgICAgICAgICAgcHJvY2Vzc29yUmVmLmN1cnJlbnQgPSBwcm9jZXNzb3I7XHJcblxyXG4gICAgICAgICAgICBzZXRTdGF0ZShzID0+ICh7IC4uLnMsIGlzVHJhbnNjcmliaW5nOiB0cnVlIH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycjogYW55KSB7XHJcbiAgICAgICAgICAgIHNldFN0YXRlKHMgPT4gKHsgLi4ucywgZXJyb3I6IGBGYWlsZWQgdG8gc3RhcnQgdHJhbnNjcmlwdGlvbjogJHtlcnIubWVzc2FnZX1gIH0pKTtcclxuICAgICAgICAgICAgdG9hc3QoeyB0aXRsZTogJ1RyYW5zY3JpcHRpb24gRXJyb3InLCBkZXNjcmlwdGlvbjogZXJyLm1lc3NhZ2UsIHZhcmlhbnQ6ICdkZXN0cnVjdGl2ZScgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW2NvbmZpZywgdG9hc3RdKTtcclxuXHJcblxyXG4gICAgY29uc3Qgc3RvcFRyYW5zY3JpcHRpb24gPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgICAgaWYgKHdzUmVmLmN1cnJlbnQ/LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XHJcbiAgICAgICAgICAgIC8vIHplcm/igJFsZW5ndGggQXJyYXlCdWZmZXIgc2lnbmFscyDigJxwbGVhc2UgZmx1c2ggJiBmaW5pc2jigJ1cclxuICAgICAgICAgICAgd3NSZWYuY3VycmVudC5zZW5kKG5ldyBBcnJheUJ1ZmZlcigwKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0ZWFyIGRvd24gYXVkaW8gZ3JhcGggaW1tZWRpYXRlbHlcclxuICAgICAgICBpZiAocHJvY2Vzc29yUmVmLmN1cnJlbnQpIHsgcHJvY2Vzc29yUmVmLmN1cnJlbnQuZGlzY29ubmVjdCgpOyBwcm9jZXNzb3JSZWYuY3VycmVudCA9IG51bGw7IH1cclxuICAgICAgICBpZiAobWljUmVmLmN1cnJlbnQpIHsgbWljUmVmLmN1cnJlbnQuZ2V0VHJhY2tzKCkuZm9yRWFjaCh0ID0+IHQuc3RvcCgpKTsgbWljUmVmLmN1cnJlbnQgPSBudWxsOyB9XHJcbiAgICAgICAgaWYgKHN5c3RlbVJlZi5jdXJyZW50KSB7IHN5c3RlbVJlZi5jdXJyZW50LmdldFRyYWNrcygpLmZvckVhY2godCA9PiB0LnN0b3AoKSk7IHN5c3RlbVJlZi5jdXJyZW50ID0gbnVsbDsgfVxyXG4gICAgICAgIGlmIChjdHhSZWYuY3VycmVudCkgeyBjdHhSZWYuY3VycmVudC5jbG9zZSgpOyBjdHhSZWYuY3VycmVudCA9IG51bGw7IH1cclxuXHJcbiAgICAgICAgc2V0U3RhdGUocyA9PiAoeyAuLi5zLCBpc1RyYW5zY3JpYmluZzogZmFsc2UgfSkpO1xyXG4gICAgfSwgW10pO1xyXG5cclxuXHJcbiAgICBjb25zdCBkaXNjb25uZWN0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgICAgIGlmICh3c1JlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIHdzUmVmLmN1cnJlbnQuY2xvc2UoKVxyXG4gICAgICAgICAgICB3c1JlZi5jdXJyZW50ID0gbnVsbFxyXG4gICAgICAgIH1cclxuICAgICAgICBzdG9wVHJhbnNjcmlwdGlvbigpXHJcbiAgICAgICAgc2V0U3RhdGUoeyBpc0Nvbm5lY3RlZDogZmFsc2UsIGlzVHJhbnNjcmliaW5nOiBmYWxzZSwgdHJhbnNjcmlwdDogJycsIGVycm9yOiBudWxsIH0pXHJcbiAgICB9LCBbc3RvcFRyYW5zY3JpcHRpb25dKVxyXG5cclxuICAgIGNvbnN0IGNsZWFyVHJhbnNjcmlwdCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgICAgICBzZXRTdGF0ZShzID0+ICh7IC4uLnMsIHRyYW5zY3JpcHQ6ICcnIH0pKVxyXG4gICAgfSwgW10pXHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzdGF0ZSxcclxuICAgICAgICBjb25uZWN0LFxyXG4gICAgICAgIHN0YXJ0VHJhbnNjcmlwdGlvbixcclxuICAgICAgICBzdG9wVHJhbnNjcmlwdGlvbixcclxuICAgICAgICBkaXNjb25uZWN0LFxyXG4gICAgICAgIGNsZWFyVHJhbnNjcmlwdCxcclxuICAgICAgICB3c1JlZixcclxuICAgIH1cclxufVxyXG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VSZWYiLCJ1c2VDYWxsYmFjayIsInVzZVRvYXN0IiwidXNlV2hpc3BlckxpdmUiLCJjb25maWciLCJzdGF0ZSIsInNldFN0YXRlIiwiaXNDb25uZWN0ZWQiLCJpc1RyYW5zY3JpYmluZyIsInRyYW5zY3JpcHQiLCJlcnJvciIsIndzUmVmIiwidWlkUmVmIiwiY3J5cHRvIiwicmFuZG9tVVVJRCIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInNsaWNlIiwidG9hc3QiLCJjb25uZWN0IiwiY29uc29sZSIsImxvZyIsImN1cnJlbnQiLCJjbG9zZSIsImN0eCIsIkF1ZGlvQ29udGV4dCIsImN0eFJlZiIsImFjdHVhbFNhbXBsZVJhdGUiLCJzYW1wbGVSYXRlIiwicyIsInByb3RvY29sIiwid2luZG93IiwibG9jYXRpb24iLCJ3cyIsIldlYlNvY2tldCIsInNlcnZlclVybCIsInBvcnQiLCJiaW5hcnlUeXBlIiwib25vcGVuIiwidGFza05hbWUiLCJ0cmFuc2xhdGUiLCJzZW5kIiwiSlNPTiIsInN0cmluZ2lmeSIsInRhc2siLCJ1aWQiLCJsYW5ndWFnZSIsIm1vZGVsIiwidmFkIiwic2F2ZV9yZWNvcmRpbmciLCJzYXZlUmVjb3JkaW5nIiwib3V0cHV0X2ZpbGVuYW1lIiwib3V0cHV0RmlsZW5hbWUiLCJtYXhfY2xpZW50cyIsIm1heENsaWVudHMiLCJtYXhfY29ubmVjdGlvbl90aW1lIiwibWF4Q29ubmVjdGlvblRpbWUiLCJzYW1wbGVfcmF0ZSIsImNodW5rX3NpemUiLCJzdGFydFRyYW5zY3JpcHRpb24iLCJvbm1lc3NhZ2UiLCJlIiwiZGF0YSIsIm1zZyIsInBhcnNlIiwidHlwZSIsInRleHQiLCJvbmNsb3NlIiwib25lcnJvciIsImVyciIsIndhcm4iLCJtaWNSZWYiLCJzeXN0ZW1SZWYiLCJwcm9jZXNzb3JSZWYiLCJyZWFkeVN0YXRlIiwiT1BFTiIsInN5c3RlbVN0cmVhbSIsImF1ZGlvU291cmNlcyIsInN5c3RlbUF1ZGlvIiwibmF2aWdhdG9yIiwibWVkaWFEZXZpY2VzIiwiZ2V0RGlzcGxheU1lZGlhIiwidmlkZW8iLCJhdWRpbyIsIm1pY1N0cmVhbSIsImdldFVzZXJNZWRpYSIsImNoYW5uZWxDb3VudCIsImRlc3QiLCJjcmVhdGVNZWRpYVN0cmVhbURlc3RpbmF0aW9uIiwibWljU3JjIiwiY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UiLCJzeXNTcmMiLCJtaXhlZFNyYyIsInN0cmVhbSIsInByb2Nlc3NvciIsImNyZWF0ZVNjcmlwdFByb2Nlc3NvciIsIm9uYXVkaW9wcm9jZXNzIiwiZmxvYXQzMiIsImlucHV0QnVmZmVyIiwiZ2V0Q2hhbm5lbERhdGEiLCJpbnQxNiIsIkludDE2QXJyYXkiLCJsZW5ndGgiLCJpIiwibWF4IiwibWluIiwiYnVmZmVyIiwiZGVzdGluYXRpb24iLCJtZXNzYWdlIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsInZhcmlhbnQiLCJzdG9wVHJhbnNjcmlwdGlvbiIsIkFycmF5QnVmZmVyIiwiZGlzY29ubmVjdCIsImdldFRyYWNrcyIsImZvckVhY2giLCJ0Iiwic3RvcCIsImNsZWFyVHJhbnNjcmlwdCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/use-whisper-live.ts\n"));

/***/ })

});
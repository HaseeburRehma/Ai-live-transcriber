"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/notes/page",{

/***/ "(app-pages-browser)/./src/hooks/use-whisper-live.ts":
/*!***************************************!*\
  !*** ./src/hooks/use-whisper-live.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useWhisperLive: () => (/* binding */ useWhisperLive)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _hooks_use_toast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/hooks/use-toast */ \"(app-pages-browser)/./src/hooks/use-toast.ts\");\n/* __next_internal_client_entry_do_not_use__ useWhisperLive auto */ \n\nfunction encodeWAV(samples, sampleRate) {\n    const bitsPerSample = 16;\n    const bytesPerSample = bitsPerSample / 8;\n    const blockAlign = bytesPerSample // mono\n    ;\n    const byteRate = sampleRate * blockAlign;\n    const dataSize = samples.length * bytesPerSample;\n    const buffer = new ArrayBuffer(44 + dataSize);\n    const view = new DataView(buffer);\n    /* RIFF identifier */ writeString(view, 0, 'RIFF');\n    /* file length minus first 8 bytes */ view.setUint32(4, 36 + dataSize, true);\n    /* WAVE type */ writeString(view, 8, 'WAVE');\n    /* fmt  chunk */ writeString(view, 12, 'fmt ');\n    view.setUint32(16, 16, true) // chunk length\n    ;\n    view.setUint16(20, 1, true) // PCM\n    ;\n    view.setUint16(22, 1, true) // mono\n    ;\n    view.setUint32(24, sampleRate, true) // sampleRate\n    ;\n    view.setUint32(28, byteRate, true) // byteRate\n    ;\n    view.setUint16(32, blockAlign, true) // blockAlign\n    ;\n    view.setUint16(34, bitsPerSample, true) // bitsPerSample\n    ;\n    /* data chunk */ writeString(view, 36, 'data');\n    view.setUint32(40, dataSize, true);\n    // write PCM samples\n    let offset = 44;\n    for(let i = 0; i < samples.length; i++){\n        // clamp\n        const s = Math.max(-1, Math.min(1, samples[i]));\n        // scale to 16‑bit int\n        view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        offset += 2;\n    }\n    return view;\n}\nfunction writeString(view, offset, s) {\n    for(let i = 0; i < s.length; i++){\n        view.setUint8(offset + i, s.charCodeAt(i));\n    }\n}\nfunction useWhisperLive(config) {\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        isConnected: false,\n        isTranscribing: false,\n        transcript: '',\n        error: null\n    });\n    const [audioData, setAudioData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dataUpdateTrigger, setDataUpdateTrigger] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const wsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const recordingBuffers = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const sampleRateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const uidRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(typeof crypto !== 'undefined' && crypto.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2));\n    const { toast } = (0,_hooks_use_toast__WEBPACK_IMPORTED_MODULE_1__.useToast)();\n    const connect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useWhisperLive.useCallback[connect]\": ()=>{\n            console.log('[useWhisperLive]  connect()', config);\n            if (wsRef.current) {\n                wsRef.current.close();\n                wsRef.current = null;\n            }\n            // 1) create AudioContext now so we can hand its real sampleRate to the server\n            const ctx = new AudioContext({\n                sampleRate: 16000\n            });\n            ctxRef.current = ctx;\n            // immediately save out the sampleRate for later WAV encoding\n            sampleRateRef.current = ctx.sampleRate;\n            // clear out any old floats from a previous session\n            recordingBuffers.current = [];\n            console.log('[useWhisperLive] audioContext.sampleRate =', sampleRateRef.current);\n            setState({\n                \"useWhisperLive.useCallback[connect]\": (s)=>({\n                        ...s,\n                        error: null\n                    })\n            }[\"useWhisperLive.useCallback[connect]\"]);\n            const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n            const ws = new WebSocket(\"\".concat(protocol, \"://\").concat(config.serverUrl, \":\").concat(config.port));\n            ws.binaryType = 'arraybuffer';\n            wsRef.current = ws;\n            ws.onopen = ({\n                \"useWhisperLive.useCallback[connect]\": ()=>{\n                    console.log('[useWhisperLive] 🟢 WebSocket OPEN');\n                    const taskName = config.translate ? 'translate' : 'transcribe';\n                    ws.send(JSON.stringify({\n                        task: taskName,\n                        uid: uidRef.current,\n                        language: config.language,\n                        model: config.model,\n                        use_vad: false,\n                        // only send us the newest segment each time:\n                        send_last_n_segments: 1,\n                        save_recording: config.saveRecording,\n                        output_filename: config.outputFilename,\n                        max_clients: config.maxClients,\n                        max_connection_time: config.maxConnectionTime,\n                        // **important**: must match your AudioContext & ScriptProcessor\n                        sample_rate: sampleRateRef.current,\n                        chunk_size: 512\n                    }));\n                    startTranscription();\n                    setState({\n                        \"useWhisperLive.useCallback[connect]\": (s)=>({\n                                ...s,\n                                isConnected: true\n                            })\n                    }[\"useWhisperLive.useCallback[connect]\"]);\n                }\n            })[\"useWhisperLive.useCallback[connect]\"];\n            // inside your connect()\n            ws.onmessage = ({\n                \"useWhisperLive.useCallback[connect]\": (e)=>{\n                    console.log('Raw WS Message:', e.data);\n                    if (typeof e.data !== 'string') return;\n                    const msg = JSON.parse(e.data);\n                    // ignore handshake\n                    if (msg.message === 'SERVER_READY') return;\n                    // errors\n                    if (msg.type === 'error') {\n                        setState({\n                            \"useWhisperLive.useCallback[connect]\": (s)=>({\n                                    ...s,\n                                    error: msg.message\n                                })\n                        }[\"useWhisperLive.useCallback[connect]\"]);\n                        return;\n                    }\n                    // old‐style partial/final (if you ever toggle that back on)\n                    if (msg.type === 'partial' || msg.type === 'transcript') {\n                        setState({\n                            \"useWhisperLive.useCallback[connect]\": (s)=>({\n                                    ...s,\n                                    isTranscribing: true,\n                                    transcript: s.transcript + msg.text\n                                })\n                        }[\"useWhisperLive.useCallback[connect]\"]);\n                        return;\n                    }\n                    if (msg.type === 'final') {\n                        setState({\n                            \"useWhisperLive.useCallback[connect]\": (s)=>({\n                                    ...s,\n                                    isTranscribing: false,\n                                    transcript: s.transcript + msg.text + '\\n'\n                                })\n                        }[\"useWhisperLive.useCallback[connect]\"]);\n                        return;\n                    }\n                    // ← NEW: handle the `segments` array\n                    if (Array.isArray(msg.segments)) {\n                        const batch = msg.segments.map({\n                            \"useWhisperLive.useCallback[connect].batch\": (seg)=>seg.text\n                        }[\"useWhisperLive.useCallback[connect].batch\"]).join('');\n                        setState({\n                            \"useWhisperLive.useCallback[connect]\": (s)=>({\n                                    ...s,\n                                    isTranscribing: true,\n                                    transcript: s.transcript + batch\n                                })\n                        }[\"useWhisperLive.useCallback[connect]\"]);\n                        return;\n                    }\n                    // fallback to any stray `msg.message`\n                    if (msg.message && msg.message !== 'SERVER_READY') {\n                        setState({\n                            \"useWhisperLive.useCallback[connect]\": (s)=>({\n                                    ...s,\n                                    isTranscribing: true,\n                                    transcript: s.transcript + msg.message\n                                })\n                        }[\"useWhisperLive.useCallback[connect]\"]);\n                    }\n                }\n            })[\"useWhisperLive.useCallback[connect]\"];\n            ws.onclose = ({\n                \"useWhisperLive.useCallback[connect]\": ()=>{\n                    setState({\n                        \"useWhisperLive.useCallback[connect]\": (s)=>({\n                                ...s,\n                                isConnected: false,\n                                isTranscribing: false\n                            })\n                    }[\"useWhisperLive.useCallback[connect]\"]);\n                }\n            })[\"useWhisperLive.useCallback[connect]\"];\n            ws.onerror = ({\n                \"useWhisperLive.useCallback[connect]\": (err)=>{\n                    console.warn('[useWhisperLive] WebSocket error (non‑fatal)', err);\n                // don’t setState or toast here\n                }\n            })[\"useWhisperLive.useCallback[connect]\"];\n        }\n    }[\"useWhisperLive.useCallback[connect]\"], [\n        config,\n        toast\n    ]);\n    const micRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const systemRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const ctxRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const processorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const startTranscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useWhisperLive.useCallback[startTranscription]\": async ()=>{\n            if (!wsRef.current || wsRef.current.readyState !== WebSocket.OPEN) {\n                setState({\n                    \"useWhisperLive.useCallback[startTranscription]\": (s)=>({\n                            ...s,\n                            error: 'Not connected'\n                        })\n                }[\"useWhisperLive.useCallback[startTranscription]\"]);\n                return;\n            }\n            try {\n                var _config_audioSources;\n                // 1) Screen + system audio (if enabled)\n                let systemStream = null;\n                if ((_config_audioSources = config.audioSources) === null || _config_audioSources === void 0 ? void 0 : _config_audioSources.systemAudio) {\n                    systemStream = await navigator.mediaDevices.getDisplayMedia({\n                        video: true,\n                        audio: true\n                    });\n                    systemRef.current = systemStream;\n                }\n                // 2) Microphone\n                const micStream = await navigator.mediaDevices.getUserMedia({\n                    audio: {\n                        sampleRate: 16000,\n                        channelCount: 1\n                    }\n                });\n                micRef.current = micStream;\n                const ctx = ctxRef.current;\n                const dest = ctx.createMediaStreamDestination();\n                // 4) Wire mic → dest\n                const micSrc = ctx.createMediaStreamSource(micStream);\n                micSrc.connect(dest);\n                // 5) Wire system audio → dest\n                if (systemStream) {\n                    const sysSrc = ctx.createMediaStreamSource(systemStream);\n                    sysSrc.connect(dest);\n                }\n                // 6) Instead of wiring mic+sys directly to the processor, we\n                //    take the mixed dest.stream and hook that up:\n                const mixedSrc = ctx.createMediaStreamSource(dest.stream);\n                // 7) Create your ScriptProcessor (bufferSize=512, mono in/out)\n                const processor = ctx.createScriptProcessor(512, 1, 1);\n                // 8) Wire the mixed audio into the processor\n                mixedSrc.connect(processor);\n                // 9) On each onaudioprocess, build exactly one packet\n                processor.onaudioprocess = ({\n                    \"useWhisperLive.useCallback[startTranscription]\": (e)=>{\n                        const float32 = e.inputBuffer.getChannelData(0);\n                        const float32Buffer = new Float32Array(float32);\n                        if (config.saveRecording) {\n                            recordingBuffers.current.push(float32Buffer);\n                        }\n                        // → convert to Uint8Array [0..255]\n                        const ui8 = new Uint8Array(float32Buffer.length);\n                        for(let i = 0; i < float32Buffer.length; i++){\n                            ui8[i] = Math.min(255, Math.max(0, Math.floor((float32Buffer[i] + 1) * 127.5)));\n                        }\n                        // send raw float32 PCM to server\n                        if (wsRef.current.readyState === WebSocket.OPEN) {\n                            wsRef.current.send(float32Buffer.buffer);\n                        }\n                        // update visualizer\n                        setAudioData(ui8);\n                        setDataUpdateTrigger({\n                            \"useWhisperLive.useCallback[startTranscription]\": (t)=>t + 1\n                        }[\"useWhisperLive.useCallback[startTranscription]\"]);\n                    }\n                })[\"useWhisperLive.useCallback[startTranscription]\"];\n                // 10) Start it\n                processor.connect(ctx.destination);\n                processorRef.current = processor;\n                setState({\n                    \"useWhisperLive.useCallback[startTranscription]\": (s)=>({\n                            ...s,\n                            isTranscribing: true\n                        })\n                }[\"useWhisperLive.useCallback[startTranscription]\"]);\n            } catch (err) {\n                setState({\n                    \"useWhisperLive.useCallback[startTranscription]\": (s)=>({\n                            ...s,\n                            error: \"Failed to start transcription: \".concat(err.message)\n                        })\n                }[\"useWhisperLive.useCallback[startTranscription]\"]);\n                toast({\n                    title: 'Transcription Error',\n                    description: err.message,\n                    variant: 'destructive'\n                });\n            }\n        }\n    }[\"useWhisperLive.useCallback[startTranscription]\"], [\n        config,\n        toast\n    ]);\n    const stopTranscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useWhisperLive.useCallback[stopTranscription]\": ()=>{\n            var _wsRef_current;\n            // 1) tell the server “END_OF_AUDIO”\n            if (((_wsRef_current = wsRef.current) === null || _wsRef_current === void 0 ? void 0 : _wsRef_current.readyState) === WebSocket.OPEN) {\n                wsRef.current.send(new TextEncoder().encode(\"END_OF_AUDIO\"));\n            }\n            // 2) immediately tear down the ScriptProcessor & tracks\n            if (processorRef.current) {\n                processorRef.current.disconnect();\n                processorRef.current = null;\n            }\n            if (micRef.current) {\n                micRef.current.getTracks().forEach({\n                    \"useWhisperLive.useCallback[stopTranscription]\": (t)=>t.stop()\n                }[\"useWhisperLive.useCallback[stopTranscription]\"]);\n                micRef.current = null;\n            }\n            if (systemRef.current) {\n                systemRef.current.getTracks().forEach({\n                    \"useWhisperLive.useCallback[stopTranscription]\": (t)=>t.stop()\n                }[\"useWhisperLive.useCallback[stopTranscription]\"]);\n                systemRef.current = null;\n            }\n            // 3) if we’ve been saving, flatten + encode + upload while ctx is still open\n            if (config.saveRecording && recordingBuffers.current.length) {\n                // ◉ use the saved sampleRate\n                const sampleRate = sampleRateRef.current;\n                // ◉ flatten into one Float32Array\n                const totalLength = recordingBuffers.current.reduce({\n                    \"useWhisperLive.useCallback[stopTranscription].totalLength\": (sum, buf)=>sum + buf.length\n                }[\"useWhisperLive.useCallback[stopTranscription].totalLength\"], 0);\n                const interleaved = new Float32Array(totalLength);\n                let offset = 0;\n                for (const buf of recordingBuffers.current){\n                    interleaved.set(buf, offset);\n                    offset += buf.length;\n                }\n                // ◉ encode + upload\n                const wavView = encodeWAV(interleaved, sampleRate);\n                const blob = new Blob([\n                    wavView.buffer\n                ], {\n                    type: 'audio/wav'\n                });\n                const form = new FormData();\n                form.append('file', blob, config.outputFilename || 'recording.wav');\n                fetch('/api/upload', {\n                    method: 'POST',\n                    body: form\n                }).then({\n                    \"useWhisperLive.useCallback[stopTranscription]\": (r)=>r.ok || Promise.reject('upload failed')\n                }[\"useWhisperLive.useCallback[stopTranscription]\"]).catch({\n                    \"useWhisperLive.useCallback[stopTranscription]\": (err)=>toast({\n                            title: 'Upload Error',\n                            description: String(err),\n                            variant: 'destructive'\n                        })\n                }[\"useWhisperLive.useCallback[stopTranscription]\"]);\n                // clear buffers now that we’ve kicked off the upload\n                recordingBuffers.current = [];\n            }\n            // 4) **now** tear down your AudioContext\n            if (ctxRef.current) {\n                ctxRef.current.close();\n                ctxRef.current = null;\n            }\n            // 5) finally, update state\n            setState({\n                \"useWhisperLive.useCallback[stopTranscription]\": (s)=>({\n                        ...s,\n                        isTranscribing: false\n                    })\n            }[\"useWhisperLive.useCallback[stopTranscription]\"]);\n        }\n    }[\"useWhisperLive.useCallback[stopTranscription]\"], [\n        config,\n        toast\n    ]);\n    const disconnect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useWhisperLive.useCallback[disconnect]\": ()=>{\n            if (wsRef.current) {\n                wsRef.current.close();\n                wsRef.current = null;\n            }\n            stopTranscription();\n            setState({\n                isConnected: false,\n                isTranscribing: false,\n                transcript: '',\n                error: null\n            });\n        }\n    }[\"useWhisperLive.useCallback[disconnect]\"], [\n        stopTranscription\n    ]);\n    const clearTranscript = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useWhisperLive.useCallback[clearTranscript]\": ()=>{\n            setState({\n                \"useWhisperLive.useCallback[clearTranscript]\": (s)=>({\n                        ...s,\n                        transcript: ''\n                    })\n            }[\"useWhisperLive.useCallback[clearTranscript]\"]);\n        }\n    }[\"useWhisperLive.useCallback[clearTranscript]\"], []);\n    return {\n        state,\n        connect,\n        startTranscription,\n        stopTranscription,\n        disconnect,\n        clearTranscript,\n        wsRef,\n        audioData,\n        dataUpdateTrigger\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9ob29rcy91c2Utd2hpc3Blci1saXZlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7b0VBRXFEO0FBQ1Q7QUFzQjVDLFNBQVNJLFVBQVVDLE9BQXFCLEVBQUVDLFVBQWtCO0lBQ3hELE1BQU1DLGdCQUFnQjtJQUN0QixNQUFNQyxpQkFBaUJELGdCQUFnQjtJQUN2QyxNQUFNRSxhQUFhRCxlQUFlLE9BQU87O0lBQ3pDLE1BQU1FLFdBQVdKLGFBQWFHO0lBQzlCLE1BQU1FLFdBQVdOLFFBQVFPLE1BQU0sR0FBR0o7SUFDbEMsTUFBTUssU0FBUyxJQUFJQyxZQUFZLEtBQUtIO0lBQ3BDLE1BQU1JLE9BQU8sSUFBSUMsU0FBU0g7SUFFMUIsbUJBQW1CLEdBQ25CSSxZQUFZRixNQUFNLEdBQUc7SUFDckIsbUNBQW1DLEdBQ25DQSxLQUFLRyxTQUFTLENBQUMsR0FBRyxLQUFLUCxVQUFVO0lBQ2pDLGFBQWEsR0FDYk0sWUFBWUYsTUFBTSxHQUFHO0lBQ3JCLGNBQWMsR0FDZEUsWUFBWUYsTUFBTSxJQUFJO0lBQ3RCQSxLQUFLRyxTQUFTLENBQUMsSUFBSSxJQUFJLE1BQXFCLGVBQWU7O0lBQzNESCxLQUFLSSxTQUFTLENBQUMsSUFBSSxHQUFHLE1BQXNCLE1BQU07O0lBQ2xESixLQUFLSSxTQUFTLENBQUMsSUFBSSxHQUFHLE1BQXNCLE9BQU87O0lBQ25ESixLQUFLRyxTQUFTLENBQUMsSUFBSVosWUFBWSxNQUFhLGFBQWE7O0lBQ3pEUyxLQUFLRyxTQUFTLENBQUMsSUFBSVIsVUFBVSxNQUFlLFdBQVc7O0lBQ3ZESyxLQUFLSSxTQUFTLENBQUMsSUFBSVYsWUFBWSxNQUFhLGFBQWE7O0lBQ3pETSxLQUFLSSxTQUFTLENBQUMsSUFBSVosZUFBZSxNQUFVLGdCQUFnQjs7SUFDNUQsY0FBYyxHQUNkVSxZQUFZRixNQUFNLElBQUk7SUFDdEJBLEtBQUtHLFNBQVMsQ0FBQyxJQUFJUCxVQUFVO0lBRTdCLG9CQUFvQjtJQUNwQixJQUFJ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R0FBR0EsQ0FBQzt3QkFBRVksZ0JBQWdCO29CQUFNOztRQUNqRDt3REFBRztRQUFDSjtRQUFRb0I7S0FBTTtJQUtsQixNQUFNc0csYUFBYXRKLGtEQUFXQTtrREFBQztZQUMzQixJQUFJdUMsTUFBTWEsT0FBTyxFQUFFO2dCQUNmYixNQUFNYSxPQUFPLENBQUNDLEtBQUs7Z0JBQ25CZCxNQUFNYSxPQUFPLEdBQUc7WUFDcEI7WUFDQStGO1lBQ0FySCxTQUFTO2dCQUFFQyxhQUFhO2dCQUFPQyxnQkFBZ0I7Z0JBQU9DLFlBQVk7Z0JBQUlDLE9BQU87WUFBSztRQUN0RjtpREFBRztRQUFDaUg7S0FBa0I7SUFFdEIsTUFBTTZCLGtCQUFrQmhMLGtEQUFXQTt1REFBQztZQUNoQzhCOytEQUFTVixDQUFBQSxJQUFNO3dCQUFFLEdBQUdBLENBQUM7d0JBQUVhLFlBQVk7b0JBQUc7O1FBQzFDO3NEQUFHLEVBQUU7SUFFTCxPQUFPO1FBQ0hKO1FBQ0FvQjtRQUNBc0M7UUFDQTREO1FBQ0FHO1FBQ0EwQjtRQUNBekk7UUFDQUo7UUFDQUU7SUFDSjtBQUNKIiwic291cmNlcyI6WyJFOlxcQWl2b2ljZXRvdGV4dFxcc3JjXFxob29rc1xcdXNlLXdoaXNwZXItbGl2ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcclxuXHJcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VSZWYsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IHVzZVRvYXN0IH0gZnJvbSAnQC9ob29rcy91c2UtdG9hc3QnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdoaXNwZXJMaXZlQ29uZmlnIHtcclxuICAgIHNlcnZlclVybDogc3RyaW5nXHJcbiAgICBwb3J0OiBudW1iZXJcclxuICAgIGxhbmd1YWdlOiBzdHJpbmdcclxuICAgIHRyYW5zbGF0ZTogYm9vbGVhblxyXG4gICAgbW9kZWw6IHN0cmluZ1xyXG4gICAgdmFkOiBib29sZWFuXHJcbiAgICBzYXZlUmVjb3JkaW5nOiBib29sZWFuXHJcbiAgICBvdXRwdXRGaWxlbmFtZTogc3RyaW5nXHJcbiAgICBtYXhDbGllbnRzOiBudW1iZXJcclxuICAgIG1heENvbm5lY3Rpb25UaW1lOiBudW1iZXJcclxuICAgIGF1ZGlvU291cmNlcz86IHsgbWljcm9waG9uZTogYm9vbGVhbjsgc3lzdGVtQXVkaW86IGJvb2xlYW4gfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgV2hpc3BlckxpdmVTdGF0ZSB7XHJcbiAgICBpc0Nvbm5lY3RlZDogYm9vbGVhblxyXG4gICAgaXNUcmFuc2NyaWJpbmc6IGJvb2xlYW5cclxuICAgIHRyYW5zY3JpcHQ6IHN0cmluZ1xyXG4gICAgZXJyb3I6IHN0cmluZyB8IG51bGxcclxufVxyXG5mdW5jdGlvbiBlbmNvZGVXQVYoc2FtcGxlczogRmxvYXQzMkFycmF5LCBzYW1wbGVSYXRlOiBudW1iZXIpOiBEYXRhVmlldyB7XHJcbiAgICBjb25zdCBiaXRzUGVyU2FtcGxlID0gMTZcclxuICAgIGNvbnN0IGJ5dGVzUGVyU2FtcGxlID0gYml0c1BlclNhbXBsZSAvIDhcclxuICAgIGNvbnN0IGJsb2NrQWxpZ24gPSBieXRlc1BlclNhbXBsZSAvLyBtb25vXHJcbiAgICBjb25zdCBieXRlUmF0ZSA9IHNhbXBsZVJhdGUgKiBibG9ja0FsaWduXHJcbiAgICBjb25zdCBkYXRhU2l6ZSA9IHNhbXBsZXMubGVuZ3RoICogYnl0ZXNQZXJTYW1wbGVcclxuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig0NCArIGRhdGFTaXplKVxyXG4gICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpXHJcblxyXG4gICAgLyogUklGRiBpZGVudGlmaWVyICovXHJcbiAgICB3cml0ZVN0cmluZyh2aWV3LCAwLCAnUklGRicpXHJcbiAgICAvKiBmaWxlIGxlbmd0aCBtaW51cyBmaXJzdCA4IGJ5dGVzICovXHJcbiAgICB2aWV3LnNldFVpbnQzMig0LCAzNiArIGRhdGFTaXplLCB0cnVlKVxyXG4gICAgLyogV0FWRSB0eXBlICovXHJcbiAgICB3cml0ZVN0cmluZyh2aWV3LCA4LCAnV0FWRScpXHJcbiAgICAvKiBmbXQgIGNodW5rICovXHJcbiAgICB3cml0ZVN0cmluZyh2aWV3LCAxMiwgJ2ZtdCAnKVxyXG4gICAgdmlldy5zZXRVaW50MzIoMTYsIDE2LCB0cnVlKSAgICAgICAgICAgICAgICAvLyBjaHVuayBsZW5ndGhcclxuICAgIHZpZXcuc2V0VWludDE2KDIwLCAxLCB0cnVlKSAgICAgICAgICAgICAgICAgLy8gUENNXHJcbiAgICB2aWV3LnNldFVpbnQxNigyMiwgMSwgdHJ1ZSkgICAgICAgICAgICAgICAgIC8vIG1vbm9cclxuICAgIHZpZXcuc2V0VWludDMyKDI0LCBzYW1wbGVSYXRlLCB0cnVlKSAgICAgICAgLy8gc2FtcGxlUmF0ZVxyXG4gICAgdmlldy5zZXRVaW50MzIoMjgsIGJ5dGVSYXRlLCB0cnVlKSAgICAgICAgICAvLyBieXRlUmF0ZVxyXG4gICAgdmlldy5zZXRVaW50MTYoMzIsIGJsb2NrQWxpZ24sIHRydWUpICAgICAgICAvLyBibG9ja0FsaWduXHJcbiAgICB2aWV3LnNldFVpbnQxNigzNCwgYml0c1BlclNhbXBsZSwgdHJ1ZSkgICAgIC8vIGJpdHNQZXJTYW1wbGVcclxuICAgIC8qIGRhdGEgY2h1bmsgKi9cclxuICAgIHdyaXRlU3RyaW5nKHZpZXcsIDM2LCAnZGF0YScpXHJcbiAgICB2aWV3LnNldFVpbnQzMig0MCwgZGF0YVNpemUsIHRydWUpXHJcblxyXG4gICAgLy8gd3JpdGUgUENNIHNhbXBsZXNcclxuICAgIGxldCBvZmZzZXQgPSA0NFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzYW1wbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gY2xhbXBcclxuICAgICAgICBjb25zdCBzID0gTWF0aC5tYXgoLTEsIE1hdGgubWluKDEsIHNhbXBsZXNbaV0pKVxyXG4gICAgICAgIC8vIHNjYWxlIHRvIDE24oCRYml0IGludFxyXG4gICAgICAgIHZpZXcuc2V0SW50MTYoXHJcbiAgICAgICAgICAgIG9mZnNldCxcclxuICAgICAgICAgICAgcyA8IDAgPyBzICogMHg4MDAwIDogcyAqIDB4N0ZGRixcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgIClcclxuICAgICAgICBvZmZzZXQgKz0gMlxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2aWV3XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdyaXRlU3RyaW5nKHZpZXc6IERhdGFWaWV3LCBvZmZzZXQ6IG51bWJlciwgczogc3RyaW5nKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCArIGksIHMuY2hhckNvZGVBdChpKSlcclxuICAgIH1cclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdXNlV2hpc3BlckxpdmUoY29uZmlnOiBXaGlzcGVyTGl2ZUNvbmZpZykge1xyXG4gICAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZTxXaGlzcGVyTGl2ZVN0YXRlPih7XHJcbiAgICAgICAgaXNDb25uZWN0ZWQ6IGZhbHNlLFxyXG4gICAgICAgIGlzVHJhbnNjcmliaW5nOiBmYWxzZSxcclxuICAgICAgICB0cmFuc2NyaXB0OiAnJyxcclxuICAgICAgICBlcnJvcjogbnVsbCxcclxuICAgIH0pXHJcbiAgICBjb25zdCBbYXVkaW9EYXRhLCBzZXRBdWRpb0RhdGFdID0gdXNlU3RhdGU8VWludDhBcnJheSB8IG51bGw+KG51bGwpXHJcbiAgICBjb25zdCBbZGF0YVVwZGF0ZVRyaWdnZXIsIHNldERhdGFVcGRhdGVUcmlnZ2VyXSA9IHVzZVN0YXRlKDApXHJcbiAgICBjb25zdCB3c1JlZiA9IHVzZVJlZjxXZWJTb2NrZXQgfCBudWxsPihudWxsKVxyXG4gICAgY29uc3QgcmVjb3JkaW5nQnVmZmVycyA9IHVzZVJlZjxGbG9hdDMyQXJyYXlbXT4oW10pXHJcbiAgICBjb25zdCBzYW1wbGVSYXRlUmVmID0gdXNlUmVmPG51bWJlcj4oMClcclxuXHJcblxyXG4gICAgY29uc3QgdWlkUmVmID0gdXNlUmVmKFxyXG4gICAgICAgIHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5yYW5kb21VVUlEXHJcbiAgICAgICAgICAgID8gY3J5cHRvLnJhbmRvbVVVSUQoKVxyXG4gICAgICAgICAgICA6IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLFxyXG4gICAgKVxyXG4gICAgY29uc3QgeyB0b2FzdCB9ID0gdXNlVG9hc3QoKVxyXG5cclxuICAgIGNvbnN0IGNvbm5lY3QgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1t1c2VXaGlzcGVyTGl2ZV0gIGNvbm5lY3QoKScsIGNvbmZpZyk7XHJcbiAgICAgICAgaWYgKHdzUmVmLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgd3NSZWYuY3VycmVudC5jbG9zZSgpXHJcbiAgICAgICAgICAgIHdzUmVmLmN1cnJlbnQgPSBudWxsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIDEpIGNyZWF0ZSBBdWRpb0NvbnRleHQgbm93IHNvIHdlIGNhbiBoYW5kIGl0cyByZWFsIHNhbXBsZVJhdGUgdG8gdGhlIHNlcnZlclxyXG4gICAgICAgIGNvbnN0IGN0eCA9IG5ldyBBdWRpb0NvbnRleHQoeyBzYW1wbGVSYXRlOiAxNjAwMCB9KVxyXG4gICAgICAgIGN0eFJlZi5jdXJyZW50ID0gY3R4XHJcblxyXG4gICAgICAgIC8vIGltbWVkaWF0ZWx5IHNhdmUgb3V0IHRoZSBzYW1wbGVSYXRlIGZvciBsYXRlciBXQVYgZW5jb2RpbmdcclxuICAgICAgICBzYW1wbGVSYXRlUmVmLmN1cnJlbnQgPSBjdHguc2FtcGxlUmF0ZVxyXG5cclxuICAgICAgICAvLyBjbGVhciBvdXQgYW55IG9sZCBmbG9hdHMgZnJvbSBhIHByZXZpb3VzIHNlc3Npb25cclxuICAgICAgICByZWNvcmRpbmdCdWZmZXJzLmN1cnJlbnQgPSBbXVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnW3VzZVdoaXNwZXJMaXZlXSBhdWRpb0NvbnRleHQuc2FtcGxlUmF0ZSA9Jywgc2FtcGxlUmF0ZVJlZi5jdXJyZW50KVxyXG4gICAgICAgIHNldFN0YXRlKHMgPT4gKHsgLi4ucywgZXJyb3I6IG51bGwgfSkpXHJcblxyXG4gICAgICAgIGNvbnN0IHByb3RvY29sID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyA/ICd3c3MnIDogJ3dzJztcclxuICAgICAgICBjb25zdCB3cyA9IG5ldyBXZWJTb2NrZXQoYCR7cHJvdG9jb2x9Oi8vJHtjb25maWcuc2VydmVyVXJsfToke2NvbmZpZy5wb3J0fWApO1xyXG4gICAgICAgIHdzLmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInXHJcbiAgICAgICAgd3NSZWYuY3VycmVudCA9IHdzXHJcblxyXG4gICAgICAgIHdzLm9ub3BlbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1t1c2VXaGlzcGVyTGl2ZV0g8J+foiBXZWJTb2NrZXQgT1BFTicpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXNrTmFtZSA9IGNvbmZpZy50cmFuc2xhdGUgPyAndHJhbnNsYXRlJyA6ICd0cmFuc2NyaWJlJ1xyXG4gICAgICAgICAgICB3cy5zZW5kKFxyXG4gICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhc2s6IHRhc2tOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHVpZDogdWlkUmVmLmN1cnJlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2U6IGNvbmZpZy5sYW5ndWFnZSxcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogY29uZmlnLm1vZGVsLFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZV92YWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgc2VuZCB1cyB0aGUgbmV3ZXN0IHNlZ21lbnQgZWFjaCB0aW1lOlxyXG4gICAgICAgICAgICAgICAgICAgIHNlbmRfbGFzdF9uX3NlZ21lbnRzOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHNhdmVfcmVjb3JkaW5nOiBjb25maWcuc2F2ZVJlY29yZGluZyxcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRfZmlsZW5hbWU6IGNvbmZpZy5vdXRwdXRGaWxlbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBtYXhfY2xpZW50czogY29uZmlnLm1heENsaWVudHMsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4X2Nvbm5lY3Rpb25fdGltZTogY29uZmlnLm1heENvbm5lY3Rpb25UaW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICoqaW1wb3J0YW50Kio6IG11c3QgbWF0Y2ggeW91ciBBdWRpb0NvbnRleHQgJiBTY3JpcHRQcm9jZXNzb3JcclxuICAgICAgICAgICAgICAgICAgICBzYW1wbGVfcmF0ZTogc2FtcGxlUmF0ZVJlZi5jdXJyZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGNodW5rX3NpemU6IDUxMixcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIHN0YXJ0VHJhbnNjcmlwdGlvbigpO1xyXG4gICAgICAgICAgICBzZXRTdGF0ZShzID0+ICh7IC4uLnMsIGlzQ29ubmVjdGVkOiB0cnVlIH0pKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaW5zaWRlIHlvdXIgY29ubmVjdCgpXHJcbiAgICAgICAgd3Mub25tZXNzYWdlID0gZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSYXcgV1MgTWVzc2FnZTonLCBlLmRhdGEpXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZS5kYXRhICE9PSAnc3RyaW5nJykgcmV0dXJuO1xyXG4gICAgICAgICAgICBjb25zdCBtc2cgPSBKU09OLnBhcnNlKGUuZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAvLyBpZ25vcmUgaGFuZHNoYWtlXHJcbiAgICAgICAgICAgIGlmIChtc2cubWVzc2FnZSA9PT0gJ1NFUlZFUl9SRUFEWScpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIC8vIGVycm9yc1xyXG4gICAgICAgICAgICBpZiAobXNnLnR5cGUgPT09ICdlcnJvcicpIHtcclxuICAgICAgICAgICAgICAgIHNldFN0YXRlKHMgPT4gKHsgLi4ucywgZXJyb3I6IG1zZy5tZXNzYWdlIH0pKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gb2xk4oCQc3R5bGUgcGFydGlhbC9maW5hbCAoaWYgeW91IGV2ZXIgdG9nZ2xlIHRoYXQgYmFjayBvbilcclxuICAgICAgICAgICAgaWYgKG1zZy50eXBlID09PSAncGFydGlhbCcgfHwgbXNnLnR5cGUgPT09ICd0cmFuc2NyaXB0Jykge1xyXG4gICAgICAgICAgICAgICAgc2V0U3RhdGUocyA9PiAoe1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLnMsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNUcmFuc2NyaWJpbmc6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNjcmlwdDogcy50cmFuc2NyaXB0ICsgbXNnLnRleHRcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobXNnLnR5cGUgPT09ICdmaW5hbCcpIHtcclxuICAgICAgICAgICAgICAgIHNldFN0YXRlKHMgPT4gKHtcclxuICAgICAgICAgICAgICAgICAgICAuLi5zLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzVHJhbnNjcmliaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2NyaXB0OiBzLnRyYW5zY3JpcHQgKyBtc2cudGV4dCArICdcXG4nXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOKGkCBORVc6IGhhbmRsZSB0aGUgYHNlZ21lbnRzYCBhcnJheVxyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtc2cuc2VnbWVudHMpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiYXRjaCA9IG1zZy5zZWdtZW50cy5tYXAoc2VnID0+IHNlZy50ZXh0KS5qb2luKCcnKVxyXG4gICAgICAgICAgICAgICAgc2V0U3RhdGUocyA9PiAoe1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLnMsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNUcmFuc2NyaWJpbmc6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNjcmlwdDogcy50cmFuc2NyaXB0ICsgYmF0Y2hcclxuICAgICAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgLy8gZmFsbGJhY2sgdG8gYW55IHN0cmF5IGBtc2cubWVzc2FnZWBcclxuICAgICAgICAgICAgaWYgKG1zZy5tZXNzYWdlICYmIG1zZy5tZXNzYWdlICE9PSAnU0VSVkVSX1JFQURZJykge1xyXG4gICAgICAgICAgICAgICAgc2V0U3RhdGUocyA9PiAoe1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLnMsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNUcmFuc2NyaWJpbmc6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNjcmlwdDogcy50cmFuc2NyaXB0ICsgbXNnLm1lc3NhZ2VcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICB3cy5vbmNsb3NlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBzZXRTdGF0ZShzID0+ICh7IC4uLnMsIGlzQ29ubmVjdGVkOiBmYWxzZSwgaXNUcmFuc2NyaWJpbmc6IGZhbHNlIH0pKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd3Mub25lcnJvciA9IChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbdXNlV2hpc3BlckxpdmVdIFdlYlNvY2tldCBlcnJvciAobm9u4oCRZmF0YWwpJywgZXJyKTtcclxuICAgICAgICAgICAgLy8gZG9u4oCZdCBzZXRTdGF0ZSBvciB0b2FzdCBoZXJlXHJcbiAgICAgICAgfTtcclxuICAgIH0sIFtjb25maWcsIHRvYXN0XSlcclxuXHJcbiAgICBjb25zdCBtaWNSZWYgPSB1c2VSZWY8TWVkaWFTdHJlYW0gfCBudWxsPihudWxsKVxyXG4gICAgY29uc3Qgc3lzdGVtUmVmID0gdXNlUmVmPE1lZGlhU3RyZWFtIHwgbnVsbD4obnVsbClcclxuICAgIGNvbnN0IGN0eFJlZiA9IHVzZVJlZjxBdWRpb0NvbnRleHQgfCBudWxsPihudWxsKVxyXG4gICAgY29uc3QgcHJvY2Vzc29yUmVmID0gdXNlUmVmPFNjcmlwdFByb2Nlc3Nvck5vZGUgfCBudWxsPihudWxsKVxyXG5cclxuICAgIGNvbnN0IHN0YXJ0VHJhbnNjcmlwdGlvbiA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcclxuICAgICAgICBpZiAoIXdzUmVmLmN1cnJlbnQgfHwgd3NSZWYuY3VycmVudC5yZWFkeVN0YXRlICE9PSBXZWJTb2NrZXQuT1BFTikge1xyXG4gICAgICAgICAgICBzZXRTdGF0ZShzID0+ICh7IC4uLnMsIGVycm9yOiAnTm90IGNvbm5lY3RlZCcgfSkpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyAxKSBTY3JlZW4gKyBzeXN0ZW0gYXVkaW8gKGlmIGVuYWJsZWQpXHJcbiAgICAgICAgICAgIGxldCBzeXN0ZW1TdHJlYW06IE1lZGlhU3RyZWFtIHwgbnVsbCA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChjb25maWcuYXVkaW9Tb3VyY2VzPy5zeXN0ZW1BdWRpbykge1xyXG4gICAgICAgICAgICAgICAgc3lzdGVtU3RyZWFtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWEoe1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1ZGlvOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBzeXN0ZW1SZWYuY3VycmVudCA9IHN5c3RlbVN0cmVhbTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gMikgTWljcm9waG9uZVxyXG4gICAgICAgICAgICBjb25zdCBtaWNTdHJlYW0gPSBhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7XHJcbiAgICAgICAgICAgICAgICBhdWRpbzogeyBzYW1wbGVSYXRlOiAxNjAwMCwgY2hhbm5lbENvdW50OiAxIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtaWNSZWYuY3VycmVudCA9IG1pY1N0cmVhbTtcclxuXHJcblxyXG4gICAgICAgICAgICBjb25zdCBjdHggPSBjdHhSZWYuY3VycmVudCFcclxuICAgICAgICAgICAgY29uc3QgZGVzdCA9IGN0eC5jcmVhdGVNZWRpYVN0cmVhbURlc3RpbmF0aW9uKClcclxuXHJcbiAgICAgICAgICAgIC8vIDQpIFdpcmUgbWljIOKGkiBkZXN0XHJcbiAgICAgICAgICAgIGNvbnN0IG1pY1NyYyA9IGN0eC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZShtaWNTdHJlYW0pO1xyXG4gICAgICAgICAgICBtaWNTcmMuY29ubmVjdChkZXN0KTtcclxuXHJcbiAgICAgICAgICAgIC8vIDUpIFdpcmUgc3lzdGVtIGF1ZGlvIOKGkiBkZXN0XHJcbiAgICAgICAgICAgIGlmIChzeXN0ZW1TdHJlYW0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN5c1NyYyA9IGN0eC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZShzeXN0ZW1TdHJlYW0pO1xyXG4gICAgICAgICAgICAgICAgc3lzU3JjLmNvbm5lY3QoZGVzdCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIDYpIEluc3RlYWQgb2Ygd2lyaW5nIG1pYytzeXMgZGlyZWN0bHkgdG8gdGhlIHByb2Nlc3Nvciwgd2VcclxuICAgICAgICAgICAgLy8gICAgdGFrZSB0aGUgbWl4ZWQgZGVzdC5zdHJlYW0gYW5kIGhvb2sgdGhhdCB1cDpcclxuICAgICAgICAgICAgY29uc3QgbWl4ZWRTcmMgPSBjdHguY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UoZGVzdC5zdHJlYW0pO1xyXG5cclxuICAgICAgICAgICAgLy8gNykgQ3JlYXRlIHlvdXIgU2NyaXB0UHJvY2Vzc29yIChidWZmZXJTaXplPTUxMiwgbW9ubyBpbi9vdXQpXHJcbiAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NvciA9IGN0eC5jcmVhdGVTY3JpcHRQcm9jZXNzb3IoNTEyLCAxLCAxKTtcclxuXHJcbiAgICAgICAgICAgIC8vIDgpIFdpcmUgdGhlIG1peGVkIGF1ZGlvIGludG8gdGhlIHByb2Nlc3NvclxyXG4gICAgICAgICAgICBtaXhlZFNyYy5jb25uZWN0KHByb2Nlc3Nvcik7XHJcblxyXG4gICAgICAgICAgICAvLyA5KSBPbiBlYWNoIG9uYXVkaW9wcm9jZXNzLCBidWlsZCBleGFjdGx5IG9uZSBwYWNrZXRcclxuICAgICAgICAgICAgcHJvY2Vzc29yLm9uYXVkaW9wcm9jZXNzID0gZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmbG9hdDMyID0gZS5pbnB1dEJ1ZmZlci5nZXRDaGFubmVsRGF0YSgwKVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZmxvYXQzMkJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoZmxvYXQzMilcclxuICAgICAgICAgICAgICAgIGlmIChjb25maWcuc2F2ZVJlY29yZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZGluZ0J1ZmZlcnMuY3VycmVudC5wdXNoKGZsb2F0MzJCdWZmZXIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyDihpIgY29udmVydCB0byBVaW50OEFycmF5IFswLi4yNTVdXHJcbiAgICAgICAgICAgICAgICBjb25zdCB1aTggPSBuZXcgVWludDhBcnJheShmbG9hdDMyQnVmZmVyLmxlbmd0aClcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmxvYXQzMkJ1ZmZlci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHVpOFtpXSA9IE1hdGgubWluKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAyNTUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWF4KDAsIE1hdGguZmxvb3IoKGZsb2F0MzJCdWZmZXJbaV0gKyAxKSAqIDEyNy41KSlcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gc2VuZCByYXcgZmxvYXQzMiBQQ00gdG8gc2VydmVyXHJcbiAgICAgICAgICAgICAgICBpZiAod3NSZWYuY3VycmVudCEucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcclxuICAgICAgICAgICAgICAgICAgICB3c1JlZi5jdXJyZW50IS5zZW5kKGZsb2F0MzJCdWZmZXIuYnVmZmVyKVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB2aXN1YWxpemVyXHJcbiAgICAgICAgICAgICAgICBzZXRBdWRpb0RhdGEodWk4KVxyXG4gICAgICAgICAgICAgICAgc2V0RGF0YVVwZGF0ZVRyaWdnZXIodCA9PiB0ICsgMSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gMTApIFN0YXJ0IGl0XHJcbiAgICAgICAgICAgIHByb2Nlc3Nvci5jb25uZWN0KGN0eC5kZXN0aW5hdGlvbik7XHJcbiAgICAgICAgICAgIHByb2Nlc3NvclJlZi5jdXJyZW50ID0gcHJvY2Vzc29yO1xyXG5cclxuICAgICAgICAgICAgc2V0U3RhdGUocyA9PiAoeyAuLi5zLCBpc1RyYW5zY3JpYmluZzogdHJ1ZSB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnI6IGFueSkge1xyXG4gICAgICAgICAgICBzZXRTdGF0ZShzID0+ICh7IC4uLnMsIGVycm9yOiBgRmFpbGVkIHRvIHN0YXJ0IHRyYW5zY3JpcHRpb246ICR7ZXJyLm1lc3NhZ2V9YCB9KSk7XHJcbiAgICAgICAgICAgIHRvYXN0KHsgdGl0bGU6ICdUcmFuc2NyaXB0aW9uIEVycm9yJywgZGVzY3JpcHRpb246IGVyci5tZXNzYWdlLCB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFtjb25maWcsIHRvYXN0XSk7XHJcblxyXG5cclxuICAgIGNvbnN0IHN0b3BUcmFuc2NyaXB0aW9uID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgICAgIC8vIDEpIHRlbGwgdGhlIHNlcnZlciDigJxFTkRfT0ZfQVVESU/igJ1cclxuICAgICAgICBpZiAod3NSZWYuY3VycmVudD8ucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcclxuICAgICAgICAgICAgd3NSZWYuY3VycmVudC5zZW5kKG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShcIkVORF9PRl9BVURJT1wiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAyKSBpbW1lZGlhdGVseSB0ZWFyIGRvd24gdGhlIFNjcmlwdFByb2Nlc3NvciAmIHRyYWNrc1xyXG4gICAgICAgIGlmIChwcm9jZXNzb3JSZWYuY3VycmVudCkge1xyXG4gICAgICAgICAgICBwcm9jZXNzb3JSZWYuY3VycmVudC5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgIHByb2Nlc3NvclJlZi5jdXJyZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1pY1JlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIG1pY1JlZi5jdXJyZW50LmdldFRyYWNrcygpLmZvckVhY2godCA9PiB0LnN0b3AoKSk7XHJcbiAgICAgICAgICAgIG1pY1JlZi5jdXJyZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN5c3RlbVJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIHN5c3RlbVJlZi5jdXJyZW50LmdldFRyYWNrcygpLmZvckVhY2godCA9PiB0LnN0b3AoKSk7XHJcbiAgICAgICAgICAgIHN5c3RlbVJlZi5jdXJyZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIDMpIGlmIHdl4oCZdmUgYmVlbiBzYXZpbmcsIGZsYXR0ZW4gKyBlbmNvZGUgKyB1cGxvYWQgd2hpbGUgY3R4IGlzIHN0aWxsIG9wZW5cclxuICAgICAgICBpZiAoY29uZmlnLnNhdmVSZWNvcmRpbmcgJiYgcmVjb3JkaW5nQnVmZmVycy5jdXJyZW50Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyDil4kgdXNlIHRoZSBzYXZlZCBzYW1wbGVSYXRlXHJcbiAgICAgICAgICAgIGNvbnN0IHNhbXBsZVJhdGUgPSBzYW1wbGVSYXRlUmVmLmN1cnJlbnQ7XHJcblxyXG4gICAgICAgICAgICAvLyDil4kgZmxhdHRlbiBpbnRvIG9uZSBGbG9hdDMyQXJyYXlcclxuICAgICAgICAgICAgY29uc3QgdG90YWxMZW5ndGggPSByZWNvcmRpbmdCdWZmZXJzLmN1cnJlbnQucmVkdWNlKChzdW0sIGJ1ZikgPT4gc3VtICsgYnVmLmxlbmd0aCwgMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGludGVybGVhdmVkID0gbmV3IEZsb2F0MzJBcnJheSh0b3RhbExlbmd0aCk7XHJcbiAgICAgICAgICAgIGxldCBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGJ1ZiBvZiByZWNvcmRpbmdCdWZmZXJzLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIGludGVybGVhdmVkLnNldChidWYsIG9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gYnVmLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8g4peJIGVuY29kZSArIHVwbG9hZFxyXG4gICAgICAgICAgICBjb25zdCB3YXZWaWV3ID0gZW5jb2RlV0FWKGludGVybGVhdmVkLCBzYW1wbGVSYXRlKTtcclxuICAgICAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFt3YXZWaWV3LmJ1ZmZlcl0sIHsgdHlwZTogJ2F1ZGlvL3dhdicgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgZm9ybS5hcHBlbmQoJ2ZpbGUnLCBibG9iLCBjb25maWcub3V0cHV0RmlsZW5hbWUgfHwgJ3JlY29yZGluZy53YXYnKTtcclxuXHJcbiAgICAgICAgICAgIGZldGNoKCcvYXBpL3VwbG9hZCcsIHsgbWV0aG9kOiAnUE9TVCcsIGJvZHk6IGZvcm0gfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHIgPT4gci5vayB8fCBQcm9taXNlLnJlamVjdCgndXBsb2FkIGZhaWxlZCcpKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB0b2FzdCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdVcGxvYWQgRXJyb3InLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTdHJpbmcoZXJyKSxcclxuICAgICAgICAgICAgICAgICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICAvLyBjbGVhciBidWZmZXJzIG5vdyB0aGF0IHdl4oCZdmUga2lja2VkIG9mZiB0aGUgdXBsb2FkXHJcbiAgICAgICAgICAgIHJlY29yZGluZ0J1ZmZlcnMuY3VycmVudCA9IFtdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gNCkgKipub3cqKiB0ZWFyIGRvd24geW91ciBBdWRpb0NvbnRleHRcclxuICAgICAgICBpZiAoY3R4UmVmLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgY3R4UmVmLmN1cnJlbnQuY2xvc2UoKTtcclxuICAgICAgICAgICAgY3R4UmVmLmN1cnJlbnQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gNSkgZmluYWxseSwgdXBkYXRlIHN0YXRlXHJcbiAgICAgICAgc2V0U3RhdGUocyA9PiAoeyAuLi5zLCBpc1RyYW5zY3JpYmluZzogZmFsc2UgfSkpO1xyXG4gICAgfSwgW2NvbmZpZywgdG9hc3RdKTtcclxuXHJcblxyXG5cclxuXHJcbiAgICBjb25zdCBkaXNjb25uZWN0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgICAgIGlmICh3c1JlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIHdzUmVmLmN1cnJlbnQuY2xvc2UoKVxyXG4gICAgICAgICAgICB3c1JlZi5jdXJyZW50ID0gbnVsbFxyXG4gICAgICAgIH1cclxuICAgICAgICBzdG9wVHJhbnNjcmlwdGlvbigpXHJcbiAgICAgICAgc2V0U3RhdGUoeyBpc0Nvbm5lY3RlZDogZmFsc2UsIGlzVHJhbnNjcmliaW5nOiBmYWxzZSwgdHJhbnNjcmlwdDogJycsIGVycm9yOiBudWxsIH0pXHJcbiAgICB9LCBbc3RvcFRyYW5zY3JpcHRpb25dKVxyXG5cclxuICAgIGNvbnN0IGNsZWFyVHJhbnNjcmlwdCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgICAgICBzZXRTdGF0ZShzID0+ICh7IC4uLnMsIHRyYW5zY3JpcHQ6ICcnIH0pKVxyXG4gICAgfSwgW10pXHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzdGF0ZSxcclxuICAgICAgICBjb25uZWN0LFxyXG4gICAgICAgIHN0YXJ0VHJhbnNjcmlwdGlvbixcclxuICAgICAgICBzdG9wVHJhbnNjcmlwdGlvbixcclxuICAgICAgICBkaXNjb25uZWN0LFxyXG4gICAgICAgIGNsZWFyVHJhbnNjcmlwdCxcclxuICAgICAgICB3c1JlZixcclxuICAgICAgICBhdWRpb0RhdGEsXHJcbiAgICAgICAgZGF0YVVwZGF0ZVRyaWdnZXIsXHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlUmVmIiwidXNlQ2FsbGJhY2siLCJ1c2VUb2FzdCIsImVuY29kZVdBViIsInNhbXBsZXMiLCJzYW1wbGVSYXRlIiwiYml0c1BlclNhbXBsZSIsImJ5dGVzUGVyU2FtcGxlIiwiYmxvY2tBbGlnbiIsImJ5dGVSYXRlIiwiZGF0YVNpemUiLCJsZW5ndGgiLCJidWZmZXIiLCJBcnJheUJ1ZmZlciIsInZpZXciLCJEYXRhVmlldyIsIndyaXRlU3RyaW5nIiwic2V0VWludDMyIiwic2V0VWludDE2Iiwib2Zmc2V0IiwiaSIsInMiLCJNYXRoIiwibWF4IiwibWluIiwic2V0SW50MTYiLCJzZXRVaW50OCIsImNoYXJDb2RlQXQiLCJ1c2VXaGlzcGVyTGl2ZSIsImNvbmZpZyIsInN0YXRlIiwic2V0U3RhdGUiLCJpc0Nvbm5lY3RlZCIsImlzVHJhbnNjcmliaW5nIiwidHJhbnNjcmlwdCIsImVycm9yIiwiYXVkaW9EYXRhIiwic2V0QXVkaW9EYXRhIiwiZGF0YVVwZGF0ZVRyaWdnZXIiLCJzZXREYXRhVXBkYXRlVHJpZ2dlciIsIndzUmVmIiwicmVjb3JkaW5nQnVmZmVycyIsInNhbXBsZVJhdGVSZWYiLCJ1aWRSZWYiLCJjcnlwdG8iLCJyYW5kb21VVUlEIiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSIsInRvYXN0IiwiY29ubmVjdCIsImNvbnNvbGUiLCJsb2ciLCJjdXJyZW50IiwiY2xvc2UiLCJjdHgiLCJBdWRpb0NvbnRleHQiLCJjdHhSZWYiLCJwcm90b2NvbCIsIndpbmRvdyIsImxvY2F0aW9uIiwid3MiLCJXZWJTb2NrZXQiLCJzZXJ2ZXJVcmwiLCJwb3J0IiwiYmluYXJ5VHlwZSIsIm9ub3BlbiIsInRhc2tOYW1lIiwidHJhbnNsYXRlIiwic2VuZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0YXNrIiwidWlkIiwibGFuZ3VhZ2UiLCJtb2RlbCIsInVzZV92YWQiLCJzZW5kX2xhc3Rfbl9zZWdtZW50cyIsInNhdmVfcmVjb3JkaW5nIiwic2F2ZVJlY29yZGluZyIsIm91dHB1dF9maWxlbmFtZSIsIm91dHB1dEZpbGVuYW1lIiwibWF4X2NsaWVudHMiLCJtYXhDbGllbnRzIiwibWF4X2Nvbm5lY3Rpb25fdGltZSIsIm1heENvbm5lY3Rpb25UaW1lIiwic2FtcGxlX3JhdGUiLCJjaHVua19zaXplIiwic3RhcnRUcmFuc2NyaXB0aW9uIiwib25tZXNzYWdlIiwiZSIsImRhdGEiLCJtc2ciLCJwYXJzZSIsIm1lc3NhZ2UiLCJ0eXBlIiwidGV4dCIsIkFycmF5IiwiaXNBcnJheSIsInNlZ21lbnRzIiwiYmF0Y2giLCJtYXAiLCJzZWciLCJqb2luIiwib25jbG9zZSIsIm9uZXJyb3IiLCJlcnIiLCJ3YXJuIiwibWljUmVmIiwic3lzdGVtUmVmIiwicHJvY2Vzc29yUmVmIiwicmVhZHlTdGF0ZSIsIk9QRU4iLCJzeXN0ZW1TdHJlYW0iLCJhdWRpb1NvdXJjZXMiLCJzeXN0ZW1BdWRpbyIsIm5hdmlnYXRvciIsIm1lZGlhRGV2aWNlcyIsImdldERpc3BsYXlNZWRpYSIsInZpZGVvIiwiYXVkaW8iLCJtaWNTdHJlYW0iLCJnZXRVc2VyTWVkaWEiLCJjaGFubmVsQ291bnQiLCJkZXN0IiwiY3JlYXRlTWVkaWFTdHJlYW1EZXN0aW5hdGlvbiIsIm1pY1NyYyIsImNyZWF0ZU1lZGlhU3RyZWFtU291cmNlIiwic3lzU3JjIiwibWl4ZWRTcmMiLCJzdHJlYW0iLCJwcm9jZXNzb3IiLCJjcmVhdGVTY3JpcHRQcm9jZXNzb3IiLCJvbmF1ZGlvcHJvY2VzcyIsImZsb2F0MzIiLCJpbnB1dEJ1ZmZlciIsImdldENoYW5uZWxEYXRhIiwiZmxvYXQzMkJ1ZmZlciIsIkZsb2F0MzJBcnJheSIsInB1c2giLCJ1aTgiLCJVaW50OEFycmF5IiwiZmxvb3IiLCJ0IiwiZGVzdGluYXRpb24iLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwidmFyaWFudCIsInN0b3BUcmFuc2NyaXB0aW9uIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJkaXNjb25uZWN0IiwiZ2V0VHJhY2tzIiwiZm9yRWFjaCIsInN0b3AiLCJ0b3RhbExlbmd0aCIsInJlZHVjZSIsInN1bSIsImJ1ZiIsImludGVybGVhdmVkIiwic2V0Iiwid2F2VmlldyIsImJsb2IiLCJCbG9iIiwiZm9ybSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwiZmV0Y2giLCJtZXRob2QiLCJib2R5IiwidGhlbiIsInIiLCJvayIsIlByb21pc2UiLCJyZWplY3QiLCJjYXRjaCIsIlN0cmluZyIsImNsZWFyVHJhbnNjcmlwdCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/use-whisper-live.ts\n"));

/***/ })

});